import streamlit as st
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import pandas as pd
import random
from datetime import datetime
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Spotify API credentials from environment variables
SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")
SPOTIFY_REDIRECT_URI = os.getenv("SPOTIFY_REDIRECT_URI", "http://localhost:8501/")

# Spotify scopes needed for playlist creation
SCOPE = "playlist-modify-public playlist-modify-private user-library-read user-top-read"

class SpotifyPlaylistGenerator:
    def __init__(self):
        self.sp = None
        
    def authenticate(self):
        """Authenticate with Spotify API"""
        try:
            # Check if credentials are loaded
            if not SPOTIFY_CLIENT_ID or not SPOTIFY_CLIENT_SECRET:
                st.error("Missing Spotify credentials. Please check your .env file.")
                return False
            
            auth_manager = SpotifyOAuth(
                client_id=SPOTIFY_CLIENT_ID,
                client_secret=SPOTIFY_CLIENT_SECRET,
                redirect_uri=SPOTIFY_REDIRECT_URI,
                scope=SCOPE,
                cache_path=".cache"
            )
            self.sp = spotipy.Spotify(auth_manager=auth_manager)
            return True
        except Exception as e:
            st.error(f"Authentication failed: {str(e)}")
            return False
    
    def search_tracks_by_genre(self, genres, limit=50):
        """Search for tracks by genre"""
        tracks = []
        for genre in genres:
            try:
                results = self.sp.search(q=f'genre:"{genre}"', type='track', limit=limit//len(genres))
                tracks.extend(results['tracks']['items'])
            except Exception as e:
                st.warning(f"Error searching for genre {genre}: {str(e)}")
        return tracks
    
    def search_tracks_by_artist(self, artists, limit=50):
        """Search for tracks by artist"""
        tracks = []
        for artist in artists:
            try:
                results = self.sp.search(q=f'artist:"{artist}"', type='track', limit=limit//len(artists))
                tracks.extend(results['tracks']['items'])
            except Exception as e:
                st.warning(f"Error searching for artist {artist}: {str(e)}")
        return tracks
    
    def get_recommendations(self, seed_genres=None, seed_artists=None, seed_tracks=None, 
                          target_energy=None, target_valence=None, target_danceability=None,
                          target_tempo=None, limit=50):
        """Get track recommendations based on parameters"""
        try:
            recommendations = self.sp.recommendations(
                seed_genres=seed_genres,
                seed_artists=seed_artists,
                seed_tracks=seed_tracks,
                target_energy=target_energy,
                target_valence=target_valence,
                target_danceability=target_danceability,
                target_tempo=target_tempo,
                limit=limit
            )
            return recommendations['tracks']
        except Exception as e:
            st.error(f"Error getting recommendations: {str(e)}")
            return []
    
    def create_playlist(self, playlist_name, track_uris, description="Generated by Streamlit App"):
        """Create a new playlist"""
        try:
            user_id = self.sp.current_user()['id']
            playlist = self.sp.user_playlist_create(
                user=user_id,
                name=playlist_name,
                public=True,
                description=description
            )
            
            # Add tracks to playlist in batches (Spotify API limit is 100 tracks per request)
            batch_size = 100
            for i in range(0, len(track_uris), batch_size):
                batch = track_uris[i:i+batch_size]
                self.sp.playlist_add_items(playlist['id'], batch)
            
            return playlist
        except Exception as e:
            st.error(f"Error creating playlist: {str(e)}")
            return None
    
    def get_audio_features(self, track_ids):
        """Get audio features for tracks"""
        try:
            features = self.sp.audio_features(track_ids)
            return features
        except Exception as e:
            st.error(f"Error getting audio features: {str(e)}")
            return []

def main():
    st.set_page_config(page_title="Spotify Playlist Generator", page_icon="üéµ", layout="wide")
    
    st.title("üéµ Spotify Playlist Generator")
    st.markdown("Create custom playlists based on your preferences!")
    
    # Initialize the generator
    generator = SpotifyPlaylistGenerator()
    
    # Sidebar for authentication and settings
    with st.sidebar:
        st.header("üîê Authentication")
        
        if st.button("Connect to Spotify"):
            if generator.authenticate():
                st.success("‚úÖ Connected to Spotify!")
                st.session_state['authenticated'] = True
            else:
                st.error("‚ùå Failed to connect to Spotify")
                st.session_state['authenticated'] = False
        
        if 'authenticated' not in st.session_state:
            st.session_state['authenticated'] = False
    
    # Main content
    if not st.session_state['authenticated']:
        st.warning("Please connect to Spotify using the sidebar to get started.")
        st.markdown("""
        ### Setup Instructions:
        1. Create a Spotify App at [Spotify Developer Dashboard](https://developer.spotify.com/dashboard)
        2. Create a `.env` file in your project directory with:
           ```
           SPOTIFY_CLIENT_ID=your_client_id_here
           SPOTIFY_CLIENT_SECRET=your_client_secret_here
           SPOTIFY_REDIRECT_URI=http://localhost:8501/
           ```
        3. Set the redirect URI in your Spotify app settings to: `http://localhost:8501/`
        4. Install dependencies: `pip install streamlit spotipy pandas python-dotenv`
        5. Click 'Connect to Spotify'
        """)
        return
    
    # Playlist generation interface
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üéØ Playlist Preferences")
        
        # Playlist name
        playlist_name = st.text_input("Playlist Name", value=f"My Playlist {datetime.now().strftime('%Y-%m-%d')}")
        
        # Generation method
        method = st.selectbox(
            "Generation Method",
            ["Recommendations", "Genre Search", "Artist Search", "Mixed"]
        )
        
        if method == "Recommendations":
            st.subheader("Audio Features")
            
            col1_1, col1_2 = st.columns(2)
            with col1_1:
                energy = st.slider("Energy Level", 0.0, 1.0, 0.5, 0.1)
                valence = st.slider("Positivity (Valence)", 0.0, 1.0, 0.5, 0.1)
            
            with col1_2:
                danceability = st.slider("Danceability", 0.0, 1.0, 0.5, 0.1)
                tempo = st.slider("Tempo (BPM)", 60, 200, 120, 5)
            
            genres = st.multiselect(
                "Seed Genres",
                ["pop", "rock", "hip-hop", "electronic", "jazz", "classical", "country", "r&b", "indie", "alternative"],
                default=["pop"]
            )
            
        elif method == "Genre Search":
            genres = st.multiselect(
                "Select Genres",
                ["pop", "rock", "hip-hop", "electronic", "jazz", "classical", "country", "r&b", "indie", "alternative", "blues", "reggae", "metal"],
                default=["pop"]
            )
            
        elif method == "Artist Search":
            artists_input = st.text_area("Enter artists (one per line)")
            artists = [artist.strip() for artist in artists_input.split('\n') if artist.strip()]
            
        else:  # Mixed method
            genres = st.multiselect(
                "Genres",
                ["pop", "rock", "hip-hop", "electronic", "jazz", "classical"],
                default=["pop"]
            )
            artists_input = st.text_area("Artists (one per line)")
            artists = [artist.strip() for artist in artists_input.split('\n') if artist.strip()]
        
        # Number of tracks
        num_tracks = st.slider("Number of Tracks", 10, 100, 30)
        
        # Generate button
        if st.button("üéµ Generate Playlist", type="primary"):
            with st.spinner("Generating your playlist..."):
                tracks = []
                
                if method == "Recommendations":
                    tracks = generator.get_recommendations(
                        seed_genres=genres[:5],  # Spotify API limit
                        target_energy=energy,
                        target_valence=valence,
                        target_danceability=danceability,
                        target_tempo=tempo,
                        limit=num_tracks
                    )
                    
                elif method == "Genre Search":
                    tracks = generator.search_tracks_by_genre(genres, num_tracks)
                    
                elif method == "Artist Search":
                    if artists:
                        tracks = generator.search_tracks_by_artist(artists, num_tracks)
                    else:
                        st.warning("Please enter at least one artist.")
                        
                elif method == "Mixed":
                    if genres and artists:
                        genre_tracks = generator.search_tracks_by_genre(genres, num_tracks//2)
                        artist_tracks = generator.search_tracks_by_artist(artists, num_tracks//2)
                        tracks = genre_tracks + artist_tracks
                    elif genres:
                        tracks = generator.search_tracks_by_genre(genres, num_tracks)
                    elif artists:
                        tracks = generator.search_tracks_by_artist(artists, num_tracks)
                
                if tracks:
                    # Remove duplicates and shuffle
                    unique_tracks = []
                    seen_ids = set()
                    for track in tracks:
                        if track['id'] not in seen_ids:
                            unique_tracks.append(track)
                            seen_ids.add(track['id'])
                    
                    # Limit to requested number
                    unique_tracks = unique_tracks[:num_tracks]
                    random.shuffle(unique_tracks)
                    
                    st.session_state['generated_tracks'] = unique_tracks
                    st.success(f"‚úÖ Generated {len(unique_tracks)} tracks!")
                else:
                    st.error("No tracks found. Try different parameters.")
    
    with col2:
        st.header("üìã Preview")
        
        if 'generated_tracks' in st.session_state:
            tracks = st.session_state['generated_tracks']
            
            # Display track list
            st.subheader(f"Tracks ({len(tracks)})")
            
            track_data = []
            for track in tracks[:10]:  # Show first 10
                artists = ", ".join([artist['name'] for artist in track['artists']])
                track_data.append({
                    "Song": track['name'],
                    "Artist": artists,
                    "Album": track['album']['name']
                })
            
            df = pd.DataFrame(track_data)
            st.dataframe(df, use_container_width=True)
            
            if len(tracks) > 10:
                st.caption(f"... and {len(tracks) - 10} more tracks")
            
            # Create playlist button
            if st.button("üìù Create Playlist on Spotify", type="primary"):
                track_uris = [track['uri'] for track in tracks]
                
                with st.spinner("Creating playlist on Spotify..."):
                    playlist = generator.create_playlist(playlist_name, track_uris)
                    
                if playlist:
                    st.success("üéâ Playlist created successfully!")
                    st.markdown(f"**[Open in Spotify]({playlist['external_urls']['spotify']})**")
                else:
                    st.error("Failed to create playlist.")
    
    # Footer
    st.markdown("---")
    st.markdown("Made with ‚ù§Ô∏è using Streamlit and Spotipy")

if __name__ == "__main__":
    main()